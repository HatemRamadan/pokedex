{"version":3,"sources":["services/PokemonService.jsx","components/pokemon/item/Item.jsx","components/pokemon/list/List.jsx","components/pokemon/image-popUp/PopUp.jsx","components/pokemon/details/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["ls","require","PokemonService","getPokemons","page","limit","cashed","get","Promise","resolve","reject","console","log","params","offset","axios","then","res","pokemons","data","results","forEach","pokemon","number","url","replace","push","count","set","catch","error","getPokemonDetails","details","types","stats","type","name","stat","value","base_stat","forms","substring","toUpperCase","sprites","front_default","PokemonItem","props","state","handleOnHover","onMouseEnter","this","style","color","to","className","Component","PokemonList","loaded","currentPage","totalNumber","handlePreviousPage","setState","currentState","handleNextPage","pop","hidden","map","key","onClick","Popup","closePopup","src","image","width","height","text","React","PokemonDetails","showPopup","handleLoaded","togglePopup","match","prevProps","onLoad","bind","cardStyle","backgroundColor","App","clearLocalStorage","event","localStorage","clear","onDoubleClick","id","ref","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.041f11c4.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst ls = require(\"localstorage-ttl\");\r\nconst PokemonService = {\r\n  //calls to API\r\n\r\n  getPokemons: function(page, limit) {\r\n    const cashed = ls.get(\"Cashed Pokemon Page: \" + page);\r\n    return new Promise(function(resolve, reject) {\r\n      if (cashed !== null) {\r\n        resolve(cashed);\r\n      } else {\r\n        console.log(\"API call page\");\r\n        const params = {\r\n          offset: (page - 1) * 20,\r\n          limit: limit\r\n        };\r\n        axios\r\n          .get(\"https://pokeapi.co/api/v2/pokemon/\", { params })\r\n          .then(res => {\r\n            var pokemons = [];\r\n            res.data.results.forEach(pokemon => {\r\n              var number = pokemon.url\r\n                .replace(\"https://pokeapi.co/api/v2/pokemon/\", \"\")\r\n                .replace(\"/\", \"\");\r\n              pokemon[\"number\"] = number;\r\n              pokemons.push(pokemon);\r\n            });\r\n            pokemons.push({ count: res.data.count });\r\n            ls.set(\"Cashed Pokemon Page: \" + page, pokemons);\r\n            resolve(pokemons);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      }\r\n    });\r\n  },\r\n  getPokemonDetails: function(number) {\r\n    const cashed = ls.get(\"Cashed Pokemon Details Number: \" + number);\r\n    return new Promise(function(resolve, reject) {\r\n      if (cashed !== null) {\r\n        resolve(cashed);\r\n      } else {\r\n        console.log(\"API call details\");\r\n        axios\r\n          .get(\"https://pokeapi.co/api/v2/pokemon/\" + number)\r\n          .then(res => {\r\n            var details = {};\r\n            var types = [];\r\n            var stats = [];\r\n            res.data.types.forEach(type => {\r\n              types.push(type.type.name);\r\n            });\r\n            res.data.stats.forEach(stat => {\r\n              stats.push({ value: stat.base_stat, name: stat.stat.name });\r\n            });\r\n            const name = res.data.forms[0].name;\r\n            details[\"name\"] =\r\n              name.substring(0, 1).toUpperCase() + name.substring(1);\r\n            details[\"image\"] = res.data.sprites.front_default;\r\n            details[\"types\"] = types;\r\n            details[\"stats\"] = stats;\r\n            ls.set(\"Cashed Pokemon Details Number: \" + number, details);\r\n            resolve(details);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      }\r\n    });\r\n  }\r\n};\r\nexport default PokemonService;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport PokemonService from \"../../../services/PokemonService\";\r\nimport \"./Item.css\";\r\n\r\nexport default class PokemonItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  state = {};\r\n\r\n  handleOnHover = () => {\r\n    PokemonService.getPokemonDetails(this.props.number);\r\n  };\r\n  render() {\r\n    return (\r\n      <div onMouseEnter={this.handleOnHover}>\r\n        <Link style={{color:\"#005aff\"}}to={\"/\" + this.props.number}>\r\n          <div className=\"pokemon-item\">\r\n            {this.props.number +\r\n              \". \" +\r\n              this.props.name.substring(0, 1).toUpperCase() +\r\n              this.props.name.substring(1)}\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport PokemonItem from \"../item/Item\";\r\nimport PokemonService from \"../../../services/PokemonService\";\r\nimport \"./List.css\";\r\nexport default class PokemonList extends Component {\r\n  state = { pokemons: [], loaded: false, currentPage: 1, totalNumber: 0 };\r\n\r\n  componentDidMount() {\r\n    this.getPokemons();\r\n  }\r\n  getPokemons() {\r\n    PokemonService.getPokemons(this.state.currentPage, 20)\r\n      .then(data => {\r\n        this.setState({\r\n          pokemons: data,\r\n          loaded: true,\r\n          totalNumber: data.pop().count\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n  handlePreviousPage = () => {\r\n    if (this.state.currentPage > 1) {\r\n      this.setState(\r\n        currentState => ({\r\n          currentPage: currentState.currentPage - 1,\r\n          loaded: false\r\n        }),\r\n        () => {\r\n          this.getPokemons();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleNextPage = () => {\r\n    if (this.state.currentPage < this.state.totalNumber / 20) {\r\n      this.setState(\r\n        currentState => ({\r\n          currentPage: currentState.currentPage + 1,\r\n          loaded: false\r\n        }),\r\n        () => {\r\n          this.getPokemons();\r\n        }\r\n      );\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container overflow-auto scrollable-view\">\r\n          <div\r\n            className=\"justify-content-start row\"\r\n            hidden={!this.state.loaded}\r\n          >\r\n            {this.state.pokemons.map(pokemon => {\r\n              return (\r\n                <div key={pokemon.number} className=\"col-md-12 mt-2 hover\">\r\n                  <PokemonItem\r\n                    name={pokemon.name}\r\n                    number={pokemon.number}\r\n                  ></PokemonItem>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {!this.state.loaded && (\r\n            <div className=\"row h-100\">\r\n              <div className=\"col loader-container\">\r\n                <div className=\"loader\"></div>\r\n                <p className=\"text-secondary\">Loading Page</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"text-center mb-1 mt-1\">\r\n          <button\r\n            className=\"btn btn-secondary btn-md mr-2\"\r\n            onClick={this.handlePreviousPage}\r\n          >\r\n            Previous\r\n          </button>\r\n          <button\r\n            className=\"btn btn-secondary btn-md\"\r\n            onClick={this.handleNextPage}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';  \r\nimport './PopUp.css';  \r\n\r\nclass Popup extends React.Component {  \r\n  render() {  \r\nreturn (  \r\n<div className='popup' onClick={this.props.closePopup}>  \r\n<div className='popup\\_inner text-center'>\r\n    <img src={this.props.image} className=\"\" width=\"40%\" height=\"40%\"></img>  \r\n<h1>{this.props.text}</h1>  \r\n<button className=\"btn btn-secondary\" onClick={this.props.closePopup}>Close</button>  \r\n</div>  \r\n</div>  \r\n);  \r\n}  \r\n}  \r\n\r\nexport default Popup;","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport PokemonService from \"../../../services/PokemonService\";\r\nimport \"./Details.css\";\r\nimport Popup from \"../image-popUp/PopUp\";\r\n\r\nconst cardStyle = { width: \"20rem\", backgroundColor: \"#e6cdac\", height:\"55vh\" };\r\nexport default class PokemonDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  state = {\r\n    number: 0,\r\n    name: \"\",\r\n    image: \"\",\r\n    loaded: false,\r\n    types: [],\r\n    stats: [],\r\n    showPopup: false\r\n  };\r\n  componentDidMount() {\r\n    this.setState(\r\n      currentState => ({\r\n        number: this.props.number.match.url.replace(\"/\", \"\")\r\n      }),\r\n      () => {\r\n        this.getPokemonDetails();\r\n      }\r\n    );\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.number.match.url !== prevProps.number.match.url) {\r\n      this.setState(\r\n        currentState => ({\r\n          number: this.props.number.match.url.replace(\"/\", \"\"),\r\n          loaded: false\r\n        }),\r\n        () => {\r\n          this.getPokemonDetails();\r\n        }\r\n      );\r\n    }\r\n  }\r\n  getPokemonDetails() {\r\n    PokemonService.getPokemonDetails(this.state.number)\r\n      .then(data => {\r\n        this.setState({\r\n          image: data.image,\r\n          name: data.name,\r\n          types: data.types,\r\n          stats: data.stats\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n  handleLoaded = () => {\r\n    this.setState({ loaded: true });\r\n  };\r\n  togglePopup = () => {\r\n    this.setState({\r\n      showPopup: !this.state.showPopup\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n        /* <img\r\n          width=\"150\"\r\n          height=\"150\"\r\n          src={this.state.image}\r\n          onLoad={this.handleLoaded}\r\n          hidden={!this.state.loaded}\r\n          placeholder=\"Pokemon front image\"\r\n        ></img>\r\n        {!this.state.loaded && (\r\n          <img src=\"/loading_pokemon.png\" width=\"150\" height=\"150\"></img>\r\n        )}\r\n        <h4 className=\"ml-4\">{this.state.name}</h4>\r\n        <p>\r\n          <span className=\"text-warning\">Types: </span>\r\n          {this.state.types.map(type => {\r\n            return <span key={type}>{type + \" \"}</span>;\r\n          })}\r\n        </p>\r\n        {this.state.stats.map(stat => {\r\n          return (\r\n            <p key={stat.name}>\r\n              <span className=\"text-warning\">\r\n                {stat.name.substring(0, 1).toUpperCase() +\r\n                  stat.name.substring(1) +\r\n                  \": \"}\r\n              </span>\r\n              <span>{stat.value}</span>\r\n            </p>\r\n          );\r\n        })} */\r\n        <div className=\"my-card  bg-dark\" >\r\n          <img\r\n            src={this.state.image}\r\n            className=\"card-img-top text-center\"\r\n            onLoad={this.handleLoaded}\r\n            hidden={!this.state.loaded}\r\n            onClick={this.togglePopup}\r\n          ></img>\r\n          {!this.state.loaded && (\r\n            <img src=\"/loading_pokemon.png\" className=\"card-img-top\"></img>\r\n          )}\r\n          <div className=\"card-body\" hidden={!this.state.loaded}>\r\n            <h4 className=\"card-title text-center\" style={{ color: \"#005aff\" }}>\r\n              {this.state.name}\r\n            </h4>\r\n            <h6 className=\"card-text\">\r\n              <div className=\"row no-gutters\">\r\n                {this.state.stats.map(stat => {\r\n                  return (\r\n                    <div className=\"col-lg-6 col-md-12 col-sm-12 text-left\" key={stat.name}>\r\n                      <span style={{ color: \"#cd3939\" }}>\r\n                        {stat.name.substring(0, 1).toUpperCase() +\r\n                          stat.name.substring(1).replace(\"-\", \" \") +\r\n                          \": \"}\r\n                      </span>\r\n                      <span className=\"text-muted\">{stat.value}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </h6>\r\n          </div>\r\n          {this.state.showPopup ? (\r\n          <Popup\r\n            closePopup={this.togglePopup.bind(this)}\r\n            image={this.state.image}\r\n          />\r\n        ) : null}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { Component } from \"react\";\nimport PokemonList from \"./components/pokemon/list/List\";\nimport PokemonDetails from \"./components/pokemon/details/Details\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nconst cardStyle = { width: \"21rem\", backgroundColor: \"#e6cdac\" };\n\nclass App extends Component {\n  state = {};\n\n  clearLocalStorage = event => {\n    localStorage.clear();\n  };\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Router>\n          <div className=\"row ml-2\">\n            <div className=\"col-md-12\" onDoubleClick={this.clearLocalStorage}>\n              <h1 className=\"text-center title slide-fwd-center\">Pokédex</h1>\n            </div>\n          </div>\n          <div className=\"row ml-2\">\n            <div\n              id=\"focusable\"\n              ref=\"focusable\"\n              className=\"col-lg-8 col-sm-6 col-md-6 card mt-3\"\n              style={cardStyle}\n            >\n              <PokemonList></PokemonList>\n            </div>\n\n            <div className=\"col-lg-4 col-sm-6 col-md-6 mt-3\">\n              <Route\n                path=\"/:number\"\n                render={number => <PokemonDetails number={number} />}\n              />\n            </div>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}